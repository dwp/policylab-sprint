// ############################################################################
// paulsmith.website fork of the CSS Wizardry Grids.
// ############################################################################
// configuration variables
// ############################################################################

// * If you are building a non-responsive site but would still like to use
// * csswizardry-grids, set this to ‘false’:
$grids-responsive:            true !default;

// * Is this build mobile first? Setting to ‘true’ means that all grids will be
// * 100% width if you do not apply a more specific class to them.
$grids-mobile-first:          true !default;

// * Set the spacing between your grid items.
$grids-gutter:                24px !default;

// * Would you like Sass’ silent classes, or regular CSS classes?
$grids-use-silent-classes:    false !default;

 // * Would you like push and pull classes enabled?
$grids-push:                  false !default;
$grids-pull:                  false !default;

// * Using `inline-block` means that the grid items need their whitespace removing
// * in order for them to work correctly. Set the following to true if you are
// * going to achieve this by manually removing/commenting out any whitespace in
// * your HTML yourself.
// *
// * Setting this to false invokes a hack which cannot always be guaranteed,
// * please see the following for more detail:

$grids-use-markup-fix:        true !default;

$grids-breakpoint-has-widths: ('small', 'medium', 'large', 'xlarge') !default;
$grids-breakpoint-has-push:   ('small', 'medium', 'large', 'xlarge') !default;
$grids-breakpoint-has-pull:   ('small', 'medium', 'large', 'xlarge') !default;

$grids-class-type: if($grids-use-silent-classes, unquote("%"), unquote("."));

// ############################################################################
// mixins
// ############################################################################

@mixin grid-media-query($media-query){
    $breakpoint-found: false;

    @each $breakpoint-name, $breakpoint-config in $mq-breakpoints {

        @if ($breakpoint-name == $media-query) {

            $breakpoint-found: true;

            @if $breakpoint-found == false{
                @warn "Breakpoint ‘#{$media-query}’ does not exist!"
            } @else {

                $breakpoint-size: map-get($breakpoint-config, size);
                $breakpoint-divisions: map-get($breakpoint-config, grid-divisions);
                $breakpoint-query-type: map-get($breakpoint-config, grid-query-type);

                @if ($breakpoint-query-type == min) {
                    @include mq($from: $breakpoint-size) {
                        @content;
                    }
                } @else if ($breakpoint-query-type == max) {
                    @include mq($until: $breakpoint-size) {
                        @content;
                    }
                }

            }

        }
    }

}

// ############################################################################
// * Drop relative positioning into silent classes which can’t take advantage of
// * the `[class*="push--"]` and `[class*="pull--"]` selectors.
// ############################################################################

@mixin silent-relative {
    @if $grids-use-silent-classes {
        position:relative;
    }
}

// ############################################################################
// grid set-up
// ############################################################################

#{$grids-class-type}grid {
    list-style:none;
    margin:0;
    padding:0;
    margin-left:-$grids-gutter;
    @if not $grids-use-markup-fix {
        letter-spacing:-0.31em;
    }
    box-sizing: border-box;
}

@if not $grids-use-markup-fix {
    .opera:-o-prefocus,
    #{$grids-class-type}grid {
        word-spacing:-0.43em;
    }
}

    #{$grids-class-type}grid__item {
      box-sizing: border-box;
        display:inline-block;
        padding-left:$grids-gutter;
        vertical-align:top;
        @if $grids-mobile-first {
            width:100%;
        }
        @if not $grids-use-markup-fix {
            letter-spacing:normal;
            word-spacing:normal;
        }
    }



// * Reversed grids allow you to structure your source in the opposite order to
// * how your rendered layout will appear. Extends `.grid`.
// ############################################################################

#{$grids-class-type}grid--rev {

    direction:rtl;
    text-align:left;

    > #{$grids-class-type}grid__item {
        direction:ltr;
        text-align:left;
    }

    [dir="rtl"] & {

        direction:ltr;
        text-align:left;

        > #{$grids-class-type}grid__item {
            direction:rtl;
            text-align:left;
        }

    }

}

// * Gutterless grids have all the properties of regular grids, minus any spacing.
// * Extends `.grid`.
// ############################################################################

#{$grids-class-type}grid--full {
    margin-left:0;

    > #{$grids-class-type}grid__item {
        padding-left:0;
    }
}

// * Align the entire grid to the right. Extends `.grid`.
// ############################################################################

#{$grids-class-type}grid--right {
    text-align:right;

    > #{$grids-class-type}grid__item {
        text-align:left;
    }
}

// * Centered grids align grid items centrally without needing to use push or pull
// * classes. Extends `.grid`.
// ############################################################################

#{$grids-class-type}grid--center {
    text-align:center;

    > #{$grids-class-type}grid__item {
        text-align:left;
    }
}

// * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
// * `.grid`.
// ############################################################################

#{$grids-class-type}grid--middle {

    > #{$grids-class-type}grid__item {
        vertical-align:middle;
    }
}

#{$grids-class-type}grid--bottom {

    > #{$grids-class-type}grid__item {
        vertical-align:bottom;
    }
}


// * Create grids with narrower gutters. Extends `.grid`.
// ############################################################################

#{$grids-class-type}grid--narrow {
    margin-left:-($grids-gutter / 2);

    > #{$grids-class-type}grid__item {
        padding-left:$grids-gutter / 2;
    }
}

// * Create grids with wider gutters. Extends `.grid`.
// ############################################################################

#{$grids-class-type}grid--wide {
    margin-left:-($grids-gutter * 2);

    > #{$grids-class-type}grid__item {
        padding-left:$grids-gutter * 2;
    }
}

// * handle last child margin within grid items
// ############################################################################

#{$grids-class-type}grid--supress-last {
    > #{$grids-class-type}grid__item {
      :last-child {
        margin-bottom: 0;
      }
    }
}

// Create our width classes, prefixed by the specified namespace.
// ############################################################################

@mixin device-type($namespace:"", $divisions: 12) {

    $prefix: $grids-class-type + $namespace;

    @if ($divisions >= 1) {
        #{$prefix}one-whole         { width:100%; }
    }

    @if ($divisions >= 2) {
        #{$prefix}one-half          { width:50%; }
    }

    @if ($divisions >= 3) {
        #{$prefix}one-third         { width:33.333%; }
        #{$prefix}two-thirds        { width:66.666%; }
    }

    @if ($divisions >= 4) {
        #{$prefix}one-quarter       { width:25%; }
        #{$prefix}two-quarters      { @extend #{$prefix}one-half; }
        #{$prefix}three-quarters    { width:75%; }
    }

    @if ($divisions >= 5) {
        #{$prefix}one-fifth         { width:20%; }
        #{$prefix}two-fifths        { width:40%; }
        #{$prefix}three-fifths      { width:60%; }
        #{$prefix}four-fifths       { width:80%; }
    }

    @if ($divisions >= 6) {
        #{$prefix}one-sixth         { width:16.666%; }
        #{$prefix}two-sixths        { @extend #{$prefix}one-third; }
        #{$prefix}three-sixths      { @extend #{$prefix}one-half; }
        #{$prefix}four-sixths       { @extend #{$prefix}two-thirds; }
        #{$prefix}five-sixths       { width:83.333%; }
    }

    @if ($divisions >= 8) {
        #{$prefix}one-eighth        { width:12.5%; }
        #{$prefix}two-eighths       { @extend #{$prefix}one-quarter; }
        #{$prefix}three-eighths     { width:37.5%; }
        #{$prefix}four-eighths      { @extend #{$prefix}one-half; }
        #{$prefix}five-eighths      { width:62.5%; }
        #{$prefix}six-eighths       { @extend #{$prefix}three-quarters; }
        #{$prefix}seven-eighths     { width:87.5%; }
    }


    @if ($divisions >= 10) {
        #{$prefix}one-tenth         { width:10%; }
        #{$prefix}two-tenths        { @extend #{$prefix}one-fifth; }
        #{$prefix}three-tenths      { width:30%; }
        #{$prefix}four-tenths       { @extend #{$prefix}two-fifths; }
        #{$prefix}five-tenths       { @extend #{$prefix}one-half; }
        #{$prefix}six-tenths        { @extend #{$prefix}three-fifths; }
        #{$prefix}seven-tenths      { width:70%; }
        #{$prefix}eight-tenths      { @extend #{$prefix}four-fifths; }
        #{$prefix}nine-tenths       { width:90%; }
    }

    @if ($divisions >= 12) {
        #{$prefix}one-twelfth       { width:8.333%; }
        #{$prefix}two-twelfths      { @extend #{$prefix}one-sixth; }
        #{$prefix}three-twelfths    { @extend #{$prefix}one-quarter; }
        #{$prefix}four-twelfths     { @extend #{$prefix}one-third; }
        #{$prefix}five-twelfths     { width:41.666% }
        #{$prefix}six-twelfths      { @extend #{$prefix}one-half; }
        #{$prefix}seven-twelfths    { width:58.333%; }
        #{$prefix}eight-twelfths    { @extend #{$prefix}two-thirds; }
        #{$prefix}nine-twelfths     { @extend #{$prefix}three-quarters; }
        #{$prefix}ten-twelfths      { @extend #{$prefix}five-sixths; }
        #{$prefix}eleven-twelfths   { width:91.666%; }
    }
}


// Our regular, non-responsive width classes.
// ############################################################################

@include device-type;

// Our responsive classes, if we have enabled them.
// ############################################################################

@if $grids-responsive {

    @each $name in $grids-breakpoint-has-widths {

        $this-divisions: map-value($mq-breakpoints,($name, grid-divisions));
        $this-queryType: map-value($mq-breakpoints,($name, grid-query-type));

        @if $this-queryType == dual {

            @include mq($from: $name) {
                /* grid classes for #{$name} with #{$this-divisions} divisions */
                @include device-type('#{$name}--', $divisions: $this-divisions);

            }

            @include mq($until: $name) {
                /* grid until classes for #{$name} with #{$this-divisions} divisions */
                @include device-type('until--#{$name}--', $divisions: $this-divisions);
            }


        } @else {

            @include grid-media-query($name) {

                /* grid classes for #{$name} with #{$this-divisions} divisions */
                @include device-type('#{$name}--', $divisions: $this-divisions);
            }

        }

    }

}


// Push classes, to move grid items over to the right by certain amounts.
// ############################################################################

@mixin push-setup($namespace: "", $divisions: 12) {
    $prefix: $grids-class-type + "push--" + $namespace;

    @if ($divisions >= 1) {
        #{$prefix}one-whole           { left:100%; @include silent-relative; }
    }


    @if ($divisions >= 2) {
        #{$prefix}one-half            { left:50%; @include silent-relative; }
    }

    @if ($divisions >= 3) {
        #{$prefix}one-third           { left:33.333%; @include silent-relative; }
        #{$prefix}two-thirds          { left:66.666%; @include silent-relative; }
    }

    @if ($divisions >= 4) {
        #{$prefix}one-quarter         { left:25%; @include silent-relative; }
        #{$prefix}two-quarters        { @extend #{$prefix}one-half; }
        #{$prefix}three-quarters      { left:75%; @include silent-relative; }
    }

    @if ($divisions >= 5) {
        #{$prefix}one-fifth           { left:20%; @include silent-relative; }
        #{$prefix}two-fifths          { left:40%; @include silent-relative; }
        #{$prefix}three-fifths        { left:60%; @include silent-relative; }
        #{$prefix}four-fifths         { left:80%; @include silent-relative; }
    }

    @if ($divisions >= 6) {
        #{$prefix}one-sixth           { left:16.666%; @include silent-relative; }
        #{$prefix}two-sixths          { @extend #{$prefix}one-third; }
        #{$prefix}three-sixths        { @extend #{$prefix}one-half; }
        #{$prefix}four-sixths         { @extend #{$prefix}two-thirds; }
        #{$prefix}five-sixths         { left:83.333%; @include silent-relative; }
    }

    @if ($divisions >= 8) {
        #{$prefix}one-eighth          { left:12.5%; @include silent-relative; }
        #{$prefix}two-eighths         { @extend #{$prefix}one-quarter; }
        #{$prefix}three-eighths       { left:37.5%; @include silent-relative; }
        #{$prefix}four-eighths        { @extend #{$prefix}one-half; }
        #{$prefix}five-eighths        { left:62.5%; @include silent-relative; }
        #{$prefix}six-eighths         { @extend #{$prefix}three-quarters; }
        #{$prefix}seven-eighths       { left:87.5%; @include silent-relative; }
    }

    @if ($divisions >= 10) {
        #{$prefix}one-tenth           { left:10%; @include silent-relative; }
        #{$prefix}two-tenths          { @extend #{$prefix}one-fifth; }
        #{$prefix}three-tenths        { left:30%; @include silent-relative; }
        #{$prefix}four-tenths         { @extend #{$prefix}two-fifths; }
        #{$prefix}five-tenths         { @extend #{$prefix}one-half; }
        #{$prefix}six-tenths          { @extend #{$prefix}three-fifths; }
        #{$prefix}seven-tenths        { left:70%; @include silent-relative; }
        #{$prefix}eight-tenths        { @extend #{$prefix}four-fifths; }
        #{$prefix}nine-tenths         { left:90%; @include silent-relative; }
    }

    @if ($divisions >= 12) {
        #{$prefix}one-twelfth         { left:8.333%; @include silent-relative; }
        #{$prefix}two-twelfths        { @extend #{$prefix}one-sixth; }
        #{$prefix}three-twelfths      { @extend #{$prefix}one-quarter; }
        #{$prefix}four-twelfths       { @extend #{$prefix}one-third; }
        #{$prefix}five-twelfths       { left:41.666%; @include silent-relative; }
        #{$prefix}six-twelfths        { @extend #{$prefix}one-half; }
        #{$prefix}seven-twelfths      { left:58.333%; @include silent-relative; }
        #{$prefix}eight-twelfths      { @extend #{$prefix}two-thirds; }
        #{$prefix}nine-twelfths       { @extend #{$prefix}three-quarters; }
        #{$prefix}ten-twelfths        { @extend #{$prefix}five-sixths; }
        #{$prefix}eleven-twelfths     { left:91.666%; @include silent-relative; }
    }

}

@if $grids-push {

    [class*="push--"] { position:relative; }

    @include push-setup;

    @if $grids-responsive {
        @each $name in $grids-breakpoint-has-push {
            @include grid-media-query($name) {
                $this-divisions: map-value($mq-breakpoints,(#{$name}, grid-divisions));
                /* grid push classes for #{$name} with #{$this-divisions} divisions */
                @include push-setup('#{$name}--', $divisions: $this-divisions);
            }
        }
    }

}

// ############################################################################
// Pull classes, to move grid items back to the left by certain amounts.
// ############################################################################

@mixin pull-setup($namespace: "", $divisions: 12) {
    $prefix: $grids-class-type + "pull--" + $namespace;

    @if ($divisions >= 1) {
        #{$prefix}one-whole           { right:100%; @include silent-relative; }
    }

    @if ($divisions >= 2) {
        #{$prefix}one-half            { right:50%; @include silent-relative; }
    }

    @if ($divisions >= 3) {
        #{$prefix}one-third           { right:33.333%; @include silent-relative; }
        #{$prefix}two-thirds          { right:66.666%; @include silent-relative; }
    }

    @if ($divisions >= 4) {
        #{$prefix}one-quarter         { right:25%; @include silent-relative; }
        #{$prefix}two-quarters        { @extend #{$prefix}one-half; }
        #{$prefix}three-quarters      { right:75%; @include silent-relative; }
    }

    @if ($divisions >= 5) {
        #{$prefix}one-fifth           { right:20%; @include silent-relative; }
        #{$prefix}two-fifths          { right:40%; @include silent-relative; }
        #{$prefix}three-fifths        { right:60%; @include silent-relative; }
        #{$prefix}four-fifths         { right:80%; @include silent-relative; }
    }

    @if ($divisions >= 6) {
        #{$prefix}one-sixth           { right:16.666%; @include silent-relative; }
        #{$prefix}two-sixths          { @extend #{$prefix}one-third; }
        #{$prefix}three-sixths        { @extend #{$prefix}one-half; }
        #{$prefix}four-sixths         { @extend #{$prefix}two-thirds; }
        #{$prefix}five-sixths         { right:83.333%; @include silent-relative; }
    }

    @if ($divisions >= 8) {
        #{$prefix}one-eighth          { right:12.5%; @include silent-relative; }
        #{$prefix}two-eighths         { @extend #{$prefix}one-quarter; }
        #{$prefix}three-eighths       { right:37.5%; @include silent-relative; }
        #{$prefix}four-eighths        { @extend #{$prefix}one-half; }
        #{$prefix}five-eighths        { right:62.5%; @include silent-relative; }
        #{$prefix}six-eighths         { @extend #{$prefix}three-quarters; }
        #{$prefix}seven-eighths       { right:87.5%; @include silent-relative; }
    }

    @if ($divisions >= 10) {
        #{$prefix}one-tenth           { right:10%; @include silent-relative; }
        #{$prefix}two-tenths          { @extend #{$prefix}one-fifth; }
        #{$prefix}three-tenths        { right:30%; @include silent-relative; }
        #{$prefix}four-tenths         { @extend #{$prefix}two-fifths; }
        #{$prefix}five-tenths         { @extend #{$prefix}one-half; }
        #{$prefix}six-tenths          { @extend #{$prefix}three-fifths; }
        #{$prefix}seven-tenths        { right:70%; @include silent-relative; }
        #{$prefix}eight-tenths        { @extend #{$prefix}four-fifths; }
        #{$prefix}nine-tenths         { right:90%; @include silent-relative; }
    }

    @if ($divisions >= 12) {
        #{$prefix}one-twelfth         { right:8.333%; @include silent-relative; }
        #{$prefix}two-twelfths        { @extend #{$prefix}one-sixth; }
        #{$prefix}three-twelfths      { @extend #{$prefix}one-quarter; }
        #{$prefix}four-twelfths       { @extend #{$prefix}one-third; }
        #{$prefix}five-twelfths       { right:41.666%; @include silent-relative; }
        #{$prefix}six-twelfths        { @extend #{$prefix}one-half; }
        #{$prefix}seven-twelfths      { right:58.333%; @include silent-relative; }
        #{$prefix}eight-twelfths      { @extend #{$prefix}two-thirds; }
        #{$prefix}nine-twelfths       { @extend #{$prefix}three-quarters; }
        #{$prefix}ten-twelfths        { @extend #{$prefix}five-sixths; }
        #{$prefix}eleven-twelfths     { right:91.666%; @include silent-relative; }
    }
}

@if $grids-pull {

    [class*="pull--"] { position:relative; }

    @include pull-setup;

    @if $grids-responsive {
        @each $name in $grids-breakpoint-has-pull {
            @include grid-media-query($name) {
                $this-divisions: map-value($mq-breakpoints,(#{$name}, grid-divisions));
                /* grid pull classes for #{$name} with #{$this-divisions} divisions */
                @include pull-setup('#{$name}--', $divisions: $this-divisions);
            }
        }
    }

}

// ############################################################################
// layout mixins
// ############################################################################

@mixin block-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
